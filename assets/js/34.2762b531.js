(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{382:function(t,s,a){"use strict";a.r(s);var e=a(22),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"本页目录"}},[t._v("本页目录")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#本页目录"}},[t._v("本页目录")])]),a("li",[a("a",{attrs:{href:"#什么是线性表"}},[t._v("什么是线性表")])]),a("li",[a("a",{attrs:{href:"#线性表特征"}},[t._v("线性表特征")])]),a("li",[a("a",{attrs:{href:"#线性表基本操作"}},[t._v("线性表基本操作")])]),a("li",[a("a",{attrs:{href:"#线性表表示方法"}},[t._v("线性表表示方法")]),a("ul",[a("li",[a("a",{attrs:{href:"#顺序表示"}},[t._v("顺序表示")])]),a("li",[a("a",{attrs:{href:"#链式表示"}},[t._v("链式表示")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"什么是线性表"}},[t._v("什么是线性表")]),t._v(" "),a("blockquote",[a("p",[t._v("具有相同类型的 n (n >= 0) 个元素的有序序列，其中 n 为表长，当 n = 0 时，该表为空表。(逻辑结构)")])]),t._v(" "),a("h2",{attrs:{id:"线性表特征"}},[t._v("线性表特征")]),t._v(" "),a("ul",[a("li",[t._v("集合中必存在唯一的一个“第一元素”。")]),t._v(" "),a("li",[t._v("集合中必存在唯一的一个 “最后元素” 。")]),t._v(" "),a("li",[t._v("除最后一个元素之外，均有唯一的后继(后件)。")]),t._v(" "),a("li",[t._v("除第一个元素之外，均有唯一的前驱(前件)。")])]),t._v(" "),a("h2",{attrs:{id:"线性表基本操作"}},[t._v("线性表基本操作")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("InitList(&L);")]),t._v(" 初始化表。构造一个空的线性表 L。")]),t._v(" "),a("li",[a("code",[t._v("DestroyList(&L);")]),t._v(" 销毁操作。销毁线性表，并释放线性表 L 所占用的内存空间。")]),t._v(" "),a("li",[a("code",[t._v("LocateElem(L, e);")]),t._v(" 按值查找。在表 L 中查找给定关键值的索引。")]),t._v(" "),a("li",[a("code",[t._v("GetElem(L, i);")]),t._v(" 按位查找。获取表 L 中的第 i 个位置的元素的值。")]),t._v(" "),a("li",[a("code",[t._v("ListInsert(&L, i, e);")]),t._v(" 插入操作。在表 L 中的第 i 个位置上插入指定元素。")]),t._v(" "),a("li",[a("code",[t._v("ListDelete(&L, i, &e);")]),t._v(" 删除操作。删除表 L 中第 i 个位置的元素，并用 e 接收删除元素的值。")]),t._v(" "),a("li",[a("code",[t._v("PrintList(L);")]),t._v(" 输出操作。按前后顺序输出表 L 的所有元素的值。")]),t._v(" "),a("li",[a("code",[t._v("Empty(L);")]),t._v(" 判空操作。判断表 L 是否为空表。")]),t._v(" "),a("li",[a("code",[t._v("Length(L);")]),t._v(" 求表长操作。求表 L 中元素的个数。")])]),t._v(" "),a("h2",{attrs:{id:"线性表表示方法"}},[t._v("线性表表示方法")]),t._v(" "),a("h3",{attrs:{id:"顺序表示"}},[t._v("顺序表示")]),t._v(" "),a("h4",{attrs:{id:"什么是顺序表"}},[t._v("什么是顺序表")]),t._v(" "),a("blockquote",[a("p",[t._v("线性表的顺序存储，顺序表是将表中的结点依次存放在计算机内存中一组地址连续的存储单元中。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"/algorithmanddatastructure/SequenceList"}},[t._v("SequenceList")])]),t._v(" "),a("h4",{attrs:{id:"顺序表的分配方法"}},[t._v("顺序表的分配方法")]),t._v(" "),a("ul",[a("li",[t._v("静态分配")])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" MaxSize 50")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ElemType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ElemType data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MaxSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("SqList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("ul",[a("li",[t._v("动态分配")])]),t._v(" "),a("blockquote",[a("p",[t._v("重新申请新的连续内存空间，并把元素转移到新的空间上，释放原有空间。")])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" MaxSize 50")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ElemType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("SqList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- 动态分配方法\n    - C语言: `L.data  = (ElemType*)malloc(sizeof(ElemType)*InitSize);`\n    - C++: `L.data = new ElemType[InitSize];`\n")])])]),a("h3",{attrs:{id:"链式表示"}},[t._v("链式表示")]),t._v(" "),a("h4",{attrs:{id:"什么是链表"}},[t._v("什么是链表")]),t._v(" "),a("blockquote",[a("p",[t._v("线性表的链式存储")])]),t._v(" "),a("h4",{attrs:{id:"常见的链表"}},[t._v("常见的链表")]),t._v(" "),a("ul",[a("li",[t._v("双链表")]),t._v(" "),a("li",[t._v("循环链表")]),t._v(" "),a("li",[t._v("静态链表")])]),t._v(" "),a("Valine")],1)}),[],!1,null,null,null);s.default=n.exports}}]);